@model EncuestasOrt.Pregunta


@{
    Layout = null;
}


<link href="@Url.Content("~/Content/MiTemplate/css/Background.css")" rel="stylesheet" type="text/css" />
@Scripts.Render("~/Scripts/chosen.jquery.min.js")
@Styles.Render("~/Content/chosen.css")

<script type="text/javascript">

    $(document).ready(function () {
        //$(".chosen-select-single").chosen();
        $(".chosen-select-multiple").chosen();
        $(".chosen-group-select").chosen();
        $(".chosen-group-multiple-select").chosen();

        $(".chosen-select-single").chosen({ width: "300px" });

    })



    $(document).ready(function () {

        $('#agregarOpcion').on('click', function () {

            $.ajax({
                url: '/Preguntas/AgregarOpcion',
                data: "idPregunta=@Model.Id",

            }).success(function (partialView) {
                $('#new-option').append(partialView);
            });



        });

        $('#new-option').on('click', '.deleteRow', function () {

            //var Opcion = $.trim($("#OpcionID").val());

            var Opcion = $(this).parent().children('input[id=OpcionID]').val();
            var datos = "idOpcion=" + Opcion;
            var remover = false;
            var obj = $(this);

            if (Opcion != 0) {
                swal({
                    title: "¿Está seguro?",
                    text: "no podra recuperarla", type: "warning", showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Si, borrar",
                    closeOnConfirm: false
                }, function () {
                    $.ajax({
                        url: '/Preguntas/BorrarOpcionJson',
                        data: datos,

                    }).success(function (result) {
                        remover = true;

                        obj.parent('div').remove();
                        swal("¡Borrada!", "La opción ha sido borrada.", "success");

                    });
                });

            } else {
                remover = true;
                $(this).parent('div').remove();
            }

            if (remover) {
                //$(this).parent('div').remove();
            }

        });

    });

    function SuccessPreguntaEdit(data) {

        swal("Bien!", "Pregunta editada", "success")
        $(this).closest('form').find("input[type=text], textarea").val("");
        $("#EditPreguntaModal").modal("hide");
        actualizarAsignadas();


    }

    function actualizarAsignadas() {

        $.ajax({
            type: "GET",
            url: "@Url.Action("GetPreguntasAsignadas", "Preguntas")",
            data: { "id": "@ViewBag.idEncuesta" },
            success: successFunc,
            error: errorFunc
        });

    }

    function successFunc(result) {
        $('#preguntasAsignadas').html(result);

    }
    function errorFunc() {
        swal("Oops...", "Error al obtener preguntas del banco", "error");

    }





</script>

@using (Ajax.BeginForm("PostEditPregunta", "Preguntas", new AjaxOptions { HttpMethod = "POST", OnSuccess = "SuccessPreguntaEdit" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.UsuarioID)

        @Html.HiddenFor(model => model.MateriaID)
        @Html.HiddenFor(model => model.TematicaID)

        <div class="form-group">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TematicaID, "Tematica", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.DropDownListFor(model => model.TematicaID, (SelectList)ViewBag.tematicas, htmlAttributes: new { @class = "chosen-select-single", style = "width:200px;" })
                @Html.ValidationMessageFor(model => model.TematicaID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MateriaID, "Materia", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.MateriaID, (SelectList)ViewBag.materias, htmlAttributes: new { @class = "chosen-select-single", style = "width:200px;" })
                @Html.ValidationMessageFor(model => model.MateriaID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tipo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Tipo", new SelectList(ViewBag.OpcionesPregunta, "Value", "Text"), new { @class = "chosen-select-single", style = "width:200px;" })
                @Html.ValidationMessageFor(model => model.Tipo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Requerido, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="btn-group" data-toggle="buttons">
                    @Html.EditorFor(model => model.Requerido)
                    @Html.ValidationMessageFor(model => model.Requerido, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <fieldset>
            <div class="form-group">

                <div class="control-label col-md-2"> <label>Opciones</label></div>
                <div class="col-md-10">
                    <button type="button" id="agregarOpcion" class="btn btn-success btn-sm">
                        <span class="glyphicon glyphicon-plus-sign"></span>Agregar Opción
                    </button>
                    <div id="new-option">

                        @foreach (var item in Model.Opcion)
                        {
                            { Html.RenderPartial("_OpcionEditor", item); }
                        }
                    </div>
                </div>
            </div>

        </fieldset>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-success btn-sm">
                    <span class="glyphicon glyphicon-save"></span>Guardar
                </button>

            </div>
        </div>
    </div>
}