@model EncuestasOrt.Pregunta

@{
    Layout = null;
}


@Scripts.Render("~/Scripts/chosen.jquery.min.js")
@Styles.Render("~/Content/chosen.css")


<script type="text/javascript">

    $(document).ready(function () {
        //$(".chosen-select-single").chosen();
        $(".chosen-select-multiple").chosen();
        $(".chosen-group-select").chosen();
        $(".chosen-group-multiple-select").chosen();

        $(".chosen-select-single").chosen({ width: "300px" });

    })



    $(document).ready(function () {
        var max_fields = 10; // maximo
        var wrapper = $(".input_fields_wrap");
        var add_button = $(".add_field_button");

        var x = 1;
        $(add_button).click(function (e) {
            e.preventDefault();
            if (x < max_fields) {
                x++;
                $(wrapper).append('<div><input type="text" name="dynamicField" data-val="true" data-val-required="Obligatorio"/><a href="#" class="remove_field">Eliminar</a> <span class="text-danger field-validation-valid" data-valmsg-for="dynamicField" data-valmsg-replace="false"></div>');
            }
        });

        $(wrapper).on("click", ".remove_field", function (e) {
            e.preventDefault(); $(this).parent('div').remove(); x--;
        })




    });

    function successPreguntaAdd(data) {

        swal("Bien!", "Pregunta agregada", "success")
        $(this).closest('form').find("input[type=text], textarea").val("");
        $("#CrearPreguntaModal").modal("hide");

        AgregarPregunta(data);
        actualizarAsignadas();
        actualizarNoAsignadas();
    }

    /*
    TODO MODULARIZAR

    */
    function actualizarAsignadas() {

        $.ajax({
            type: "GET",
            url: "@Url.Action("GetPreguntasAsignadas", "Preguntas")",
            data: { "id": "@ViewBag.idEncuesta" },
            success: successFunc,
            error: errorFunc
        });

    }

    function successFunc(result) {
        $('#preguntasAsignadas').html(result);

    }
    function errorFunc() {
        swal("Oops...", "Error al obtener preguntas del banco", "error");

    }

    function AgregarPregunta(idPregunta) {

        $.ajax({ url: "@Url.Action("AgregarPregunta", "Encuestas")", type: "POST", data: { id: idPregunta, encuestaId: '@ViewBag.idEncuesta' } })
    .done(function () {

        actualizarAsignadas();
        actualizarNoAsignadas();

    })
    .fail(function () {
        swal("Oops...", "Error al asignar la pregunta", "error");

    });

    }

    function actualizarNoAsignadas() {

        $.ajax({
            type: "GET",
            url: "@Url.Action("GetPreguntasSinAsignar", "Preguntas")",
            data: { "id": "@ViewBag.idEncuesta" },
            success: noasignadasSuccess,
            error: noasignadasError
        });

    }

    function noasignadasSuccess(result) {
        $('#preguntasNoAsignadas').html(result);

    }
    function noasignadasError() {
        swal("Oops...", "Error al obtener preguntas del banco", "error");

    }

</script>

@using (Ajax.BeginForm("PostNuevaPregunta", "Preguntas", new AjaxOptions { HttpMethod = "POST", OnSuccess = "successPreguntaAdd" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.UsuarioID)
    @Html.HiddenFor(model => model.Compartir)
    @Html.HiddenFor(model => model.EstadoInactivo)


    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tipo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.DropDownList("Tipo", new SelectList(ViewBag.OpcionesPregunta, "Value", "Text"), htmlAttributes: new { @class = "chosen-select-single" })

                @Html.ValidationMessageFor(model => model.Tipo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TematicaID, "Tematica", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.DropDownListFor(model => model.TematicaID, (SelectList)ViewBag.tematicas, htmlAttributes: new { @class = "chosen-select-single", style = "width:200px;" })

                @Html.ValidationMessageFor(model => model.TematicaID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MateriaID, "Materia", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.DropDownListFor(model => model.MateriaID, (SelectList)ViewBag.materias, htmlAttributes: new { @class = "chosen-select-single", style = "width:200px;" })


                @Html.ValidationMessageFor(model => model.MateriaID, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Requerido, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Requerido)
                    @Html.ValidationMessageFor(model => model.Requerido, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2"><label>Opciones</label></div>
            <div class="col-md-10">
                <div class="input_fields_wrap">
                    <button class="add_field_button">Agregar mas opciones</button>
                    <div><input type="text" name="dynamicField" data-val="true" data-val-required="Obligatorio"><span class="text-danger field-validation-valid" data-valmsg-for="dynamicField" data-valmsg-replace="true"></span></div>
                </div>
            </div>

        </div>

    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button type="submit" class="btn btn-success btn-sm">
                <span class="glyphicon glyphicon-save"></span>Guardar
            </button>
        </div>
    </div>
}